# -*- coding: utf-8 -*-
"""setFit_latesttickets.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mXkaSHNC22GFguyxGA4t5XNvbbSZd1uR
"""

!pip install setfit

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import os, gc, warnings
from sklearn.preprocessing import LabelEncoder
warnings.filterwarnings("ignore")

from datasets import load_dataset
from sentence_transformers.losses import CosineSimilarityLoss
from setfit import SetFitModel, SetFitTrainer

df=pd.read_csv("latest_ticket_data.csv")

df.rename({'Description': 'text', 'Category': 'label_text'}, axis=1, inplace=True)

LE = LabelEncoder()
df['label'] = LE.fit_transform(df['label_text'])

# Generate samples that contains K samples of each class

def gen_sample(df, sample_size, num_classes):

    df_1 = df[(df["label"]<num_classes + 1)].reset_index().drop(["index"], axis=1).reset_index().drop(["index"], axis=1)
    train = df_1[df_1["label"] == np.unique(df_1['label'])[0]].sample(sample_size)

    train_index = train.index.tolist()

    for i in range(1,num_classes):
        train_2 = df_1[df_1["label"] == np.unique(df_1['label'])[i]].sample(sample_size)
        train = pd.concat([train, train_2], axis=0)
        train_index.extend(train_2.index.tolist())

    test = df_1[~df_1.index.isin(train_index)]

    return train, test

data, rest = gen_sample(df, 5, 5)

train_dataset, test_dataset = gen_sample(data, 4, 5)

# Load SetFit model from Hub
model = SetFitModel.from_pretrained("sentence-transformers/paraphrase-mpnet-base-v2")

from datasets import Dataset
dataset = Dataset.from_pandas(df)
train_ds = Dataset.from_pandas(train_dataset)
test_ds = Dataset.from_pandas(test_dataset)

dataset

# Create trainer
trainer = SetFitTrainer(
    model=model,
    train_dataset=train_ds,
    eval_dataset=test_ds,
    loss_class=CosineSimilarityLoss,
    batch_size=16,
    num_iterations=20, # Number of text pairs to generate for contrastive learning
    num_epochs=1 # Number of epochs to use for contrastive learning
)

# Train and evaluate!
trainer.train()
metrics = trainer.evaluate()

metrics