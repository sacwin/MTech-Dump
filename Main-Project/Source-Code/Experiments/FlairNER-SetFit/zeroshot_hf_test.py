# -*- coding: utf-8 -*-
"""ZeroShot_HF_Test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i_PuClz_8idt7WoqM0D0sBt1h2bawgd-
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import os, gc, warnings
from sklearn.preprocessing import LabelEncoder
warnings.filterwarnings("ignore")

#import transformers
from transformers import pipeline

df=pd.read_csv("latest_ticket_data.csv")

classifier = pipeline("zero-shot-classification")

candidate_labels = df['Category'].unique()

LE = LabelEncoder()
df['Label'] = LE.fit_transform(df['Category'])
print(df)

# Generate samples that contains K samples of each class

def gen_sample(df, sample_size, num_classes):

    df_1 = df[(df["Label"]<num_classes + 1)].reset_index().drop(["index"], axis=1).reset_index().drop(["index"], axis=1)
    train = df_1[df_1["Label"] == np.unique(df_1['Label'])[0]].sample(sample_size)

    train_index = train.index.tolist()

    for i in range(1,num_classes):
        train_2 = df_1[df_1["Label"] == np.unique(df_1['Label'])[i]].sample(sample_size)
        train = pd.concat([train, train_2], axis=0)
        train_index.extend(train_2.index.tolist())

    test = df_1[~df_1.index.isin(train_index)]

    return train, test

train_dataset, test_dataset = gen_sample(df, 10, 5)

train_dataset.shape

train_dataset['pred_label'] = train_dataset["Description"].map(lambda x: classifier(x, candidate_labels)['scores'].index(max(classifier(x, candidate_labels)['scores'])))

train_dataset['pred_label']

train_dataset['Label']

train_dataset

seq = train_dataset['Description'][1993]
print(classifier(seq, candidate_labels)['scores'])
print(max(classifier(seq, candidate_labels)['scores']))
print(classifier(seq, candidate_labels)['scores'].index(max(classifier(seq, candidate_labels)['scores'])))

y_pred = train_dataset['pred_label'].values
y_true = train_dataset['Label'].values
from sklearn.metrics import accuracy_score
accuracy_score(y_true, y_pred)